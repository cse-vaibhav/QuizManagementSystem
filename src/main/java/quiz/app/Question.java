/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package quiz.app;

import javax.swing.*;
import java.awt.*;
import java.sql.Statement;
import java.sql.ResultSet;
import java.util.concurrent.CopyOnWriteArrayList;

/**
 *
 * @author user
 */
public class Question extends javax.swing.JPanel {

    /**
     * Creates new form Question
     */

    private int score;
    private javax.swing.JLabel title_label;
    private javax.swing.JCheckBox option1;
    private javax.swing.JCheckBox option2;
    private javax.swing.JCheckBox option3;
    private javax.swing.JCheckBox option4;

    private javax.swing.JLabel QuestionLabel;
    private javax.swing.JButton back_button;
    private javax.swing.JButton next_submit_button;
    private int[] questions;

    private int currQuestion;
    public Question() {
        initComponents();

        try {
            Statement st = Utils.connection.createStatement();

            ResultSet rs = st.executeQuery(String.format("SELECT ID FROM QuizManagementSystem.Codes WHERE Code = '%s'", Utils.quizCode));
            rs.next();
            int quizID = rs.getInt(1);
            System.out.println("3");
            System.out.println(quizID);

            // get count of questions
            rs = st.executeQuery( "SELECT COUNT(DISTINCT QuestionID) from QuizManagementSystem.`Options` WHERE QuizCode = " + quizID+ ";");
            rs.next();
            int count = rs.getInt(1);

            // get questionIDs of all questions
            questions = new int[count];
            rs = st.executeQuery("SELECT DISTINCT QuestionID from QuizManagementSystem.`Options` o WHERE QuizCode = " + quizID + ";");
            int i=0;
            while (rs.next()) {
                System.out.println(questions[i]);
                questions[i++] = rs.getInt(1);
            }
            st.close();
        } catch (Exception e) {}

        back_button.setBackground(new Color(242, 200, 200));
        if (questions.length == 1) {
            next_submit_button.setBackground(new Color(200, 242, 200));
            next_submit_button.setText("Submit");
        }

        currQuestion = 0;
        loadQuestion();
    }

    /**
     * This method is called from within the constructor to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        option1 = new javax.swing.JCheckBox();
        option2 = new javax.swing.JCheckBox();
        option3 = new javax.swing.JCheckBox();
        option4 = new javax.swing.JCheckBox();
        back_button = new javax.swing.JButton();
        next_submit_button = new javax.swing.JButton();
        QuestionLabel = new javax.swing.JLabel();
        title_label = new javax.swing.JLabel();

        javax.swing.JComboBox<String> jComboBox1 = new javax.swing.JComboBox<>();
        javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
        javax.swing.JPanel jPanel2 = new javax.swing.JPanel();
        javax.swing.JPanel jPanel3 = new javax.swing.JPanel();


        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2"}));

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        title_label.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        title_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title_label.setText("Title");

        QuestionLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        QuestionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        QuestionLabel.setText("Question");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap(66, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(QuestionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 723, Short.MAX_VALUE)
                                        .addComponent(title_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(46, 46, 46))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(title_label, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(QuestionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(8, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        option1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        option1.setText("option1");
        option1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        option1.setIconTextGap(15);

        option2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        option2.setText("option2");
        option2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        option2.setIconTextGap(15);

        option3.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        option3.setText("option3");
        option3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        option3.setIconTextGap(15);

        option4.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        option4.setText("option4");
        option4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        option4.setIconTextGap(15);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(90, 90, 90)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(option1, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                                        .addComponent(option2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(105, 105, 105)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(option4, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                                        .addComponent(option3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap(116, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(option1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(option3, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(54, 54, 54)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(option4, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(option2, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(60, Short.MAX_VALUE))
        );

        jPanel3.setLayout(new java.awt.GridLayout(1, 0));

        back_button.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        back_button.setText("Back");
        back_button.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        back_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_buttonActionPerformed(evt);
            }
        });

        next_submit_button.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        next_submit_button.setText("Next");
        next_submit_button.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        next_submit_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                next_submit_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(158, 158, 158)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 571, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(185, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(207, 207, 207))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(back_button, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED, GroupLayout.PREFERRED_SIZE, Short.MAX_VALUE)
                                                .addComponent(next_submit_button, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(42, 42, 42))))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(back_button, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(next_submit_button, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(68, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void loadQuestion() {
        int question = questions[currQuestion];
        try {

            Statement st = Utils.connection.createStatement();
            // get quiz code id
            ResultSet rs = st.executeQuery(String.format("SELECT ID,Title FROM QuizManagementSystem.Codes WHERE Code = '%s'", Utils.quizCode));
            rs.next();
            int quizID = rs.getInt(1);
            title_label.setText(rs.getString(2));

            option1.setSelected(false);
            option2.setSelected(false);
            option3.setSelected(false);
            option4.setSelected(false);

            System.out.println(quizID);
            System.out.println(question);

            // retrieve four options for the question
            rs = st.executeQuery("SELECT `option`from QuizManagementSystem.`Options` WHERE QuizCode = " + quizID + " AND QuestionID = " + question + ";");
            JCheckBox[] options = {option1, option2, option3, option4};
            for (JCheckBox checkbox : options) {
                rs.next();
                checkbox.setText(rs.getString(1));
            }

            // retrieve the question
            rs = st.executeQuery("SELECT Question FROM QuizManagementSystem.Questions WHERE ID = " + question);
            rs.next();
            QuestionLabel.setText(rs.getString(1));

            st.close();

        } catch (Exception e) {
            System.out.println(e);
        }



    }

    private void saveResponse() {
        JCheckBox[] options = {option1, option2, option3, option4};
        try {
            Statement st = Utils.connection.createStatement();
            ResultSet rs;

            // get question id
            rs = st.executeQuery(String.format("SELECT ID FROM QuizManagementSystem.Questions WHERE Question = '%s'", QuestionLabel.getText()));
            rs.next();
            int questionID = rs.getInt(1);

            // get Quiz Code ID
            rs = st.executeQuery(String.format("SELECT ID,Title FROM QuizManagementSystem.Codes WHERE Code = '%s'", Utils.quizCode));
            rs.next();
            int quizID = rs.getInt(1);

            // check if already marked
            rs = st.executeQuery(String.format("SELECT COUNT(*) FROM QuizManagementSystem.Responses r " +
                    "INNER JOIN QuizManagementSystem.`Options` o " +
                    "ON o.ID = r.`option` WHERE QuestionId = %d AND QuizCode = %d", questionID, quizID));
           rs.next();
            System.out.println( "x " + rs.getInt(1));
           if (rs.getInt(1) == 0) {
               for (JCheckBox option : options) {
                   if (!option.isSelected()) {
                       continue;
                   }
                   // get option id
                   rs = st.executeQuery(String.format("SELECT ID FROM QuizManagementSystem.Options WHERE `option` = '%s' AND QuestionID = %d AND QuizCode = %d;", option.getText(), questionID, quizID));
                   rs.next();

                   st.execute(String.format("INSERT INTO QuizManagementSystem.Responses (`option`, Users) VALUES(%d, %d);", rs.getInt(1), Utils.currUserID));
               }
           }
           st.close();
           Utils.connection.commit();
        } catch (Exception e) {
            System.out.println(e);
            try {
                Utils.connection.rollback();
            } catch (Exception e1) {
                System.out.println(e1);
            }
        }
    }

    private void back_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back_buttonActionPerformed
        // TODO add your handling code here:
        if (currQuestion == 0) {
            Utils.PopUp("You can't go back");
            return;
        }

        try {
            saveResponse();
            currQuestion--; loadQuestion();
            if (currQuestion == 0) {
                back_button.setBackground(new Color(242, 200, 200));
            }
        } catch (Exception e){
            System.out.println(e);
       }
    }//GEN-LAST:event_back_buttonActionPerformed

    private void next_submit_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back_buttonActionPerformed
        // TODO add your handling code here:
        if (currQuestion == questions.length-1) {
            saveResponse();
            System.out.println("Submitted");
            Utils.changePane(new Response());
            return;
        }
        try {
            saveResponse();
            currQuestion++; loadQuestion();
            if (currQuestion == questions.length-1) {
                next_submit_button.setText("Submit");
                next_submit_button.setBackground(new Color(200, 242, 200));
            }
        } catch (Exception e){
            System.out.println(e);
       }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
